
// Generated by CoffeeScript 2.2.2
(function() {
  var CellState, GameOfGeister, GeisterObj;

  GeisterObj = (function() {
    class GeisterObj {
      constructor(color, player) {
        this.color = color;
        this.player = player;
      }

    };

    GeisterObj.COLOR_NONE = 0;

    GeisterObj.COLOR_RED = 1;

    GeisterObj.COLOR_BLUE = 2;

    GeisterObj.PLAYER_NONE = 0;

    GeisterObj.PLAYER_A = 1;

    GeisterObj.PLAYER_B = 2;

    GeisterObj.prototype.color = null;

    GeisterObj.prototype.player = null;

    GeisterObj.prototype.hidden = false;

    GeisterObj.prototype.moving = false;

    return GeisterObj;

  }).call(this);

  CellState = (function() {
    class CellState {
      constructor(row1, column1) {
        this.row = row1;
        this.column = column1;
        this.obj = new GeisterObj(GeisterObj.COLOR_NONE, GeisterObj.PLAYER_NONE);
      }

    };

    CellState.prototype.obj = null;

    return CellState;

  }).call(this);

  GameOfGeister = (function() {
    class GameOfGeister {
      constructor() {
        var hostname;
        hostname = window.location.hostname;
        if (hostname === "") {
          hostname = "localhost";
        }
        this.ws = new WebSocket('ws://' + hostname + ':8080/ws/geister');
        this.createCanvas();
        this.resizeCanvas();
        this.createDrawingContext();
        this.ready_resources();
        this.ws.geister = this;
        this.ws.onmessage = function(e) {
          return this.geister.update_info(e);
        };
        this.turnPlayer = 1;
        this.prevMesg = "";
      }

      str2color(s) {
        s = s.toUpperCase();
        if (s === 'R') {
          return GeisterObj.COLOR_RED;
        }
        if (s === 'B') {
          return GeisterObj.COLOR_BLUE;
        }
        return GeisterObj.COLOR_NONE;
      }

      update_info(e) {
        var c, column, escape_player, i, info, item, j, k, l, m, msg, ref, ref1, row, state, taken_1st, taken_2nd, x, y;
        var mochi_jikan, mochi_jikan0, mochi_jikan1, byo_yomi, byo_yomi0, byo_yomi1, player_name0, player_name1, win, lose, draw, turn;
        msg = e.data;
        console.log(msg);
        $('#message').text(msg);
        if (msg.length < 5) {
          return;
        }
        // æ™‚é–“ã‚’å—ä¿¡ã—ãŸå ´åˆï¼Žå—ä¿¡ã™ã‚‹æ–‡å­—åˆ—å½¢å¼ã¯ "TIME,MT:(æŒã¡æ™‚é–“),BY:(ç§’èª­ã¿)"
        // ã¨ã‚Šã‚ãˆãšè¡¨ç¤ºã ã‘
        [msg, mochi_jikan0, mochi_jikan1, byo_yomi0, byo_yomi1, player_name0, player_name1, win, lose, draw, turn] = msg.split(',');
        mochi_jikan0 = mochi_jikan0.slice(4);
        mochi_jikan1 = mochi_jikan1.slice(4);
        byo_yomi0 = byo_yomi0.slice(4);
        byo_yomi1 = byo_yomi1.slice(4);
        player_name0 = player_name0.slice(6);
        player_name1 = player_name1.slice(6);
        win = win.slice(4);
        lose = lose.slice(5);
        draw = draw.slice(5);
        turn = turn.slice(5);
        $('#mochi_jikan0').text('');
        $('#mochi_jikan0').html(mochi_jikan0);
        $('#mochi_jikan1').text('');
        $('#mochi_jikan1').html(mochi_jikan1);
        $('#byo_yomi0').text('');
        $('#byo_yomi0').html(byo_yomi0);
        $('#byo_yomi1').text('');
        $('#byo_yomi1').html(byo_yomi1);
        $('#player_name0').text('');
        $('#player_name0').html(player_name0);
        $('#player_name1').text('');
        $('#player_name1').html(player_name1);
        $('#win').text('');
        $('#win').html(win);
        $('#lose').text('');
        $('#lose').html(lose);
        $('#draw').text('');
        $('#draw').html(draw);
        $('#turn').text('');
        $('#turn').html(turn);

        if (this.prevMesg !== "" && this.prevMesg !== msg && msg.slice(0, 3) === "MV0") {
          this.turnPlayer = 1;
        }
        if (this.prevMesg !== "" && this.prevMesg !== msg && msg.slice(0, 3) === "MV1") {
          this.turnPlayer = -1;
        }
        this.prevMesg = msg;
        state = msg.slice(0, 3);
        msg = msg.slice(4);
        this.currentCell = [];
        taken_1st = [];
        taken_2nd = [];
        escape_player = GeisterObj.PLAYER_NONE;
        for (row = j = 0, ref = this.numberOfRows; (0 <= ref ? j < ref : j > ref); row = 0 <= ref ? ++j : --j) {
          this.currentCell[row] = [];
          for (column = l = 0, ref1 = this.numberOfColumns; (0 <= ref1 ? l < ref1 : l > ref1); column = 0 <= ref1 ? ++l : --l) {
            this.currentCell[row][column] = new CellState(row, column);
          }
        }
        for (i = m = 0; m < 16; i = ++m) {
          item = msg.slice(3 * i, +(3 * i + 2) + 1 || 9e9);
          x = parseInt(item[0]);
          y = parseInt(item[1]);
          c = item[2].toUpperCase();
          if (x < 6 && y < 6) {
            if (i < 8) {
              this.currentCell[y + 1][x + 1].obj.player = GeisterObj.PLAYER_B;
            } else {
              this.currentCell[y + 1][x + 1].obj.player = GeisterObj.PLAYER_A;
            }
            this.currentCell[y + 1][x + 1].obj.color = this.str2color(c);
          }
          if (x === 9) {
            k = 'U';
            if (this.str2color(c) === GeisterObj.COLOR_BLUE) {
              k = '<font color="blue"><bold>B</bold></font>';
            } else if (this.str2color(c) === GeisterObj.COLOR_RED) {
              k = '<font color="red"><bold>R</bold></font>';
            }
            if (i < 8) {
              taken_2nd.push(k);
            } else {
              taken_1st.push(k);
            }
          }
          if (x === 8) {
            if (i < 8) {
              escape_player = GeisterObj.PLAYER_B;
            } else {
              escape_player = GeisterObj.PLAYER_A;
            }
          }
        }
        info = "1st Player's taken items: " + taken_1st + "<br>" + "2nd Player's taken items: " + taken_2nd;
        if (escape_player === GeisterObj.PLAYER_A) {
          info += "<BR>" + "1st Player's ghost has escaped.";
        } else if (escape_player === GeisterObj.PLAYER_B) {
          info += "<BR>" + "2nd Player's ghost has escaped.";
        }
        $('#message').text('');
        $('#message').html(info);
        this.drawBoard();
        if (state === "WI0" && this.state !== "WI0") {
          jAlert('1st player won', 'Game set');
        }
        if (state === "WI1" && this.state !== "WI1") {
          jAlert('2nd player won', 'Game set');
        }
        if (state === "DRW" && this.state !== "DRW") {
          jAlert('Draw', 'Game set');
        }
        return this.state = state;
      }

      ready_resources(f) {
        this.arrow_img = new Image();
        this.arrow_img.src = "arrow.png?" + new Date().getTime();
        return this.arrow_img.onload = () => {
          this.geister_obj_img = new Image();
          this.geister_obj_img.src = "geister_obj.png?" + new Date().getTime();
          return this.geister_obj_img.onload = () => {
            this.geister_red_img = new Image();
            this.geister_red_img.src = "geister_red.png?" + new Date().getTime();
            return this.geister_red_img.onload = () => {
              this.geister_blue_img = new Image();
              this.geister_blue_img.src = "geister_blue.png?" + new Date().getTime();
              return this.geister_blue_img.onload = () => {
                return this.initGame();
              };
            };
          };
        };
      }

      initGame() {
        this.initCells();
        return this.drawBoard();
      }

      readyGame() {
        var column, j, l, ref, ref1, row, start;
        for (row = j = 0, ref = this.numberOfRows; (0 <= ref ? j < ref : j > ref); row = 0 <= ref ? ++j : --j) {
          for (column = l = 0, ref1 = this.numberOfColumns; (0 <= ref1 ? l < ref1 : l > ref1); column = 0 <= ref1 ? ++l : --l) {
            if (this.currentCell[row][column].obj.player === GeisterObj.PLAYER_A) {
              this.currentCell[row][column].obj.hidden = true;
            }
          }
        }
        this.drawBoard();
        this.swapOwnObj(100);
        this.game_status = 'RUN';
        return start = $('#start')[0].disabled = true;
      }

      createCanvas() {
        return this.canvas = $('#gameboard')[0];
      }

      resizeCanvas() {
        this.canvas.height = this.cellSize * this.numberOfRows;
        return this.canvas.width = this.cellSize * this.numberOfColumns;
      }

      createDrawingContext() {
        return this.drawingContext = this.canvas.getContext('2d');
      }

      initCells() {
        var column, j, l, ref, ref1, row;
        this.currentCell = [];
        for (row = j = 0, ref = this.numberOfRows; (0 <= ref ? j < ref : j > ref); row = 0 <= ref ? ++j : --j) {
          this.currentCell[row] = [];
          for (column = l = 0, ref1 = this.numberOfColumns; (0 <= ref1 ? l < ref1 : l > ref1); column = 0 <= ref1 ? ++l : --l) {
            this.currentCell[row][column] = new CellState(row, column);
          }
        }
        return this.turnPlayer = 1;
      }

      drawImage(img, x, y, rot) {
        if (rot) {
          this.drawingContext.save();
          this.drawingContext.rotate(180 * Math.PI / 180);
          x = (-x - 1) * this.cellSize;
          y = (-y - 1) * this.cellSize;
        } else {
          x = x * this.cellSize;
          y = y * this.cellSize;
        }
        this.drawingContext.drawImage(img, x, y, this.cellSize, this.cellSize);
        if (rot) {
          return this.drawingContext.restore();
        }
      }

      drawBoard() {
        this.drawingContext.clearRect(0, 0, this.drawingContext.canvas.clientWidth, this.drawingContext.canvas.clientHeight);
        this.drawImage(this.arrow_img, 1, 1, false);
        this.drawImage(this.arrow_img, 6, 1, true);
        this.drawImage(this.arrow_img, 1, 6, false);
        this.drawImage(this.arrow_img, 6, 6, true);
        this.drawGrid();
        if (this.turnPlayer === 1) {
          this.drawingContext.fillStyle = "rgb(200, 0, 0)";
          return this.drawingContext.fillRect(0, 0, this.drawingContext.canvas.clientWidth, 5);
        } else {
          this.drawingContext.fillStyle = "rgb(0, 0, 200)";
          return this.drawingContext.fillRect(0, this.drawingContext.canvas.clientHeight - 5, this.drawingContext.canvas.clientWidth, 5);
        }
      }

      drawGrid() {
        var column, j, ref, results, row;
        results = [];
        for (row = j = 0, ref = this.numberOfRows; (0 <= ref ? j < ref : j > ref); row = 0 <= ref ? ++j : --j) {
          results.push((function() {
            var l, ref1, results1;
            results1 = [];
            for (column = l = 0, ref1 = this.numberOfColumns; (0 <= ref1 ? l < ref1 : l > ref1); column = 0 <= ref1 ? ++l : --l) {
              results1.push(this.drawCell(this.currentCell[row][column]));
            }
            return results1;
          }).call(this));
        }
        return results;
      }

      getObjImage(obj) {
        if ($('#hidden').is(':checked') === true) {
          return this.geister_obj_img;
        }
        if (obj.color === GeisterObj.COLOR_BLUE) {
          return this.geister_blue_img;
        }
        if (obj.color === GeisterObj.COLOR_RED) {
          return this.geister_red_img;
        }
        return this.geister_obj_img;
      }

      drawCell(cell) {
        var img, ref, ref1, strk, x, y;
        x = cell.column * this.cellSize;
        y = cell.row * this.cellSize;
        if (cell.obj.player !== GeisterObj.PLAYER_NONE && cell.obj.moving === false) {
          img = this.getObjImage(cell.obj);
          this.drawImage(img, cell.column, cell.row, cell.obj.player === GeisterObj.PLAYER_A);
        }
        if ((0 < (ref = cell.column) && ref < 7) && (0 < (ref1 = cell.row) && ref1 < 7)) {
          strk = 'rgba(0, 0, 0, 1)';
        } else {
          strk = 'rgba(0, 0, 0, 0)';
        }
        this.drawingContext.strokeStyle = strk;
        return this.drawingContext.strokeRect(x, y, this.cellSize, this.cellSize);
      }

    };

    GameOfGeister.prototype.cellSize = 60;

    GameOfGeister.prototype.numberOfRows = 8;

    GameOfGeister.prototype.numberOfColumns = 8;

    GameOfGeister.prototype.canvas = null;

    GameOfGeister.prototype.drawingContext = null;

    GameOfGeister.prototype.currentCell = null;

    GameOfGeister.prototype.arrow_img = null;

    GameOfGeister.prototype.geister_obj_img = null;

    GameOfGeister.prototype.geister_red_img = null;

    GameOfGeister.prototype.geister_blue_img = null;

    GameOfGeister.prototype.selectedX = null;

    GameOfGeister.prototype.selectedY = null;

    GameOfGeister.prototype.selectedItem = null;

    GameOfGeister.prototype.turn = 'B';

    GameOfGeister.prototype.game_status = 'PREPARE';

    GameOfGeister.prototype.playerA = null;

    GameOfGeister.prototype.playerB = null;

    GameOfGeister.prototype.state = '';

    return GameOfGeister;

  }).call(this);

  console.log("start");

  window.GameOfGeister = GameOfGeister;

}).call(this);
